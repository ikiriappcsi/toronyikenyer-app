const express = require('express');
const router = express.Router();
const Order = require('./models/order');

// POST /api/v1/orders - √öj rendel√©s l√©trehoz√°sa
router.post('/', async (req, res) => {
  try {
    const { pickup_date, pickup_time_start, pickup_time_end, items, convenience_fee } = req.body;
    
    console.log('üõí √öj rendel√©s l√©trehoz√°sa:', req.body);
    
    // Valid√°ci√≥
    if (!pickup_date || !pickup_time_start || !pickup_time_end || !items || items.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Hi√°nyos rendel√©si adatok'
      });
    }

    // √ñsszeg sz√°m√≠t√°sa
    let total_amount = 0;
    for (const item of items) {
      total_amount += item.total_price;
    }
    total_amount += convenience_fee || 50; // Alap√©rtelmezett k√©nyelmi d√≠j

    // Order code gener√°l√°s
    const order_code = Order.generateOrderCode(new Date(pickup_date));
    
    const orderData = {
      order_code,
      pickup_date,
      pickup_time_start,
      pickup_time_end,
      total_amount,
      convenience_fee: convenience_fee || 50,
      items
    };

    const newOrder = await Order.create(orderData);

    res.status(201).json({
      success: true,
      data: {
        order_id: newOrder.id,
        order_code: newOrder.order_code,
        total_amount: newOrder.total_amount,
        pickup_date: newOrder.pickup_date,
        pickup_time_start: newOrder.pickup_time_start,
        pickup_time_end: newOrder.pickup_time_end,
        status: newOrder.status
      },
      message: 'Rendel√©s sikeresen l√©trehozva',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a rendel√©s l√©trehoz√°s√°n√°l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a rendel√©s l√©trehoz√°s√°n√°l',
      error: error.message
    });
  }
});

// GET /api/v1/orders/today - Mai rendel√©sek (dolgoz√≥i fel√ºlet)
// FONTOS: Ez EL≈êBB kell lennie, mint a /:orderCode route!
router.get('/today', async (req, res) => {
  try {
    console.log('üìÖ Mai rendel√©sek lek√©r√©se...');
    const orders = await Order.findTodayOrders();
    
    res.json({
      success: true,
      data: orders,
      count: orders.length,
      date: new Date().toISOString().split('T')[0],
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a mai rendel√©sek lek√©r√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a mai rendel√©sek lek√©r√©s√©n√©l',
      error: error.message
    });
  }
});

// GET /api/v1/orders/date/:date - Rendel√©sek adott d√°tumra
// FONTOS: Ez is EL≈êBB kell lennie, mint a /:orderCode route!
router.get('/date/:date', async (req, res) => {
  try {
    const { date } = req.params;
    console.log(`üìÖ Rendel√©sek lek√©r√©se d√°tumra: ${date}`);
    
    const orders = await Order.findByDate(date);
    
    res.json({
      success: true,
      data: orders,
      count: orders.length,
      date: date,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a rendel√©sek lek√©r√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a rendel√©sek lek√©r√©s√©n√©l',
      error: error.message
    });
  }
});

// PUT /api/v1/orders/:id/status - Rendel√©s st√°tusz friss√≠t√©se (dolgoz√≥i fel√ºlet)
router.put('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    console.log(`üîÑ St√°tusz friss√≠t√©s - Rendel√©s ID: ${id}, √öj st√°tusz: ${status}`);
    
    // Valid√°ci√≥
    const validStatuses = ['waiting', 'delivered', 'expired'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: '√ârv√©nytelen st√°tusz. Lehets√©ges √©rt√©kek: waiting, delivered, expired'
      });
    }

    const updatedOrder = await Order.updateStatus(id, status);
    
    if (!updatedOrder) {
      return res.status(404).json({
        success: false,
        message: 'Rendel√©s nem tal√°lhat√≥'
      });
    }

    res.json({
      success: true,
      data: updatedOrder,
      message: `Rendel√©s st√°tusza friss√≠tve: ${status}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a st√°tusz friss√≠t√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a st√°tusz friss√≠t√©s√©n√©l',
      error: error.message
    });
  }
});

// GET /api/v1/orders/:orderCode - Rendel√©s lek√©r√©se order_code alapj√°n
// FONTOS: Ez UTOLS√ì kell legyen, mert minden m√°st elkaphat!
router.get('/:orderCode', async (req, res) => {
  try {
    const { orderCode } = req.params;
    console.log(`üîç Rendel√©s keres√©se: ${orderCode}`);
    
    const order = await Order.findByOrderCode(orderCode);
    
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Rendel√©s nem tal√°lhat√≥'
      });
    }

    res.json({
      success: true,
      data: order,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a rendel√©s lek√©r√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a rendel√©s lek√©r√©s√©n√©l',
      error: error.message
    });
  }
});

module.exports = router;
