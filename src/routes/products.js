const express = require('express');
const router = express.Router();
const Product = require('../models/Product');

// GET /api/v1/products - √ñsszes term√©k lek√©r√©se
router.get('/', async (req, res) => {
  try {
    console.log('üì¶ Term√©kek lek√©r√©se...');
    const products = await Product.findAll();
    
    res.json({
      success: true,
      data: products,
      count: products.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a term√©kek lek√©r√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a term√©kek lek√©r√©s√©n√©l',
      error: error.message
    });
  }
});

// GET /api/v1/products/:id - Egy term√©k lek√©r√©se ID alapj√°n
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üì¶ Term√©k lek√©r√©se ID: ${id}`);
    
    const product = await Product.findById(id);
    
    if (!product) {
      return res.status(404).json({
        success: false,
        message: 'Term√©k nem tal√°lhat√≥'
      });
    }

    res.json({
      success: true,
      data: product,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a term√©k lek√©r√©s√©n√©l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a term√©k lek√©r√©s√©n√©l',
      error: error.message
    });
  }
});

// PUT /api/v1/products/:id/price - Term√©k √°r m√≥dos√≠t√°sa (admin)
router.put('/:id/price', async (req, res) => {
  try {
    const { id } = req.params;
    const { price } = req.body;
    
    console.log(`üí∞ √År m√≥dos√≠t√°s - Term√©k ID: ${id}, √öj √°r: ${price}`);
    
    // Valid√°ci√≥
    if (!price || price < 0) {
      return res.status(400).json({
        success: false,
        message: '√ârv√©nyes √°r sz√ºks√©ges'
      });
    }

    const updatedProduct = await Product.updatePrice(id, price);
    
    if (!updatedProduct) {
      return res.status(404).json({
        success: false,
        message: 'Term√©k nem tal√°lhat√≥'
      });
    }

    res.json({
      success: true,
      data: updatedProduct,
      message: '√År sikeresen friss√≠tve',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba az √°r m√≥dos√≠t√°s√°n√°l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba az √°r m√≥dos√≠t√°s√°n√°l',
      error: error.message
    });
  }
});

// PUT /api/v1/products/:id/status - Term√©k aktiv√°l√°s/deaktiv√°l√°s (admin)
router.put('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { is_active } = req.body;
    
    console.log(`üîÑ St√°tusz m√≥dos√≠t√°s - Term√©k ID: ${id}, Akt√≠v: ${is_active}`);
    
    const updatedProduct = await Product.toggleActive(id, is_active);
    
    if (!updatedProduct) {
      return res.status(404).json({
        success: false,
        message: 'Term√©k nem tal√°lhat√≥'
      });
    }

    res.json({
      success: true,
      data: updatedProduct,
      message: `Term√©k ${is_active ? 'aktiv√°lva' : 'deaktiv√°lva'}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Hiba a st√°tusz m√≥dos√≠t√°s√°n√°l:', error);
    res.status(500).json({
      success: false,
      message: 'Hiba a st√°tusz m√≥dos√≠t√°s√°n√°l',
      error: error.message
    });
  }
});

module.exports = router;